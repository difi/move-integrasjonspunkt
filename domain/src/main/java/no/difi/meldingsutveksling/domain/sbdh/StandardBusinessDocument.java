//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.11.25 at 12:23:12 PM CET 
//


package no.difi.meldingsutveksling.domain.sbdh;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Data;
import net.logstash.logback.marker.LogstashMarker;
import no.difi.meldingsutveksling.domain.MeldingsUtvekslingRuntimeException;
import no.difi.meldingsutveksling.domain.MessageInfo;
import no.difi.meldingsutveksling.domain.Organisasjonsnummer;
import no.difi.meldingsutveksling.nextmove.NextMoveRuntimeException;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.*;
import java.time.OffsetDateTime;
import java.util.Optional;
import java.util.Set;


/**
 * Java class for StandardBusinessDocument complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="StandardBusinessDocument">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element ref="{http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader}StandardBusinessDocumentHeader" minOccurs="0"/>
 *         <any processContents='lax' namespace='##other'/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StandardBusinessDocument", propOrder = {
        "standardBusinessDocumentHeader",
        "any"
})
@Data
public class StandardBusinessDocument {

    @XmlElement(name = "StandardBusinessDocumentHeader")
    @NotNull
    @Valid
    private StandardBusinessDocumentHeader standardBusinessDocumentHeader;

    @XmlAnyElement(lax = true)
    @NotNull
    private Object any;

    @JsonIgnore
    public <T> Optional<T> getBusinessMessage(Class<T> clazz) {
        return clazz.isInstance(any) ? Optional.of(clazz.cast(any)) : Optional.empty();
    }

    @JsonIgnore
    public MessageInfo getMessageInfo() {
        return new MessageInfo(getMessageType(), getReceiverIdentifier(), getSenderIdentifier(), getJournalPostId(), getConversationId(), getDocumentId());
    }

    @JsonIgnore
    public Organisasjonsnummer getSender() {
        return getStandardBusinessDocumentHeader().getFirstSender()
                .map(Partner::getIdentifier)
                .map(PartnerIdentification::getAsOrganisasjonsnummer)
                .orElse(null);
    }

    @JsonIgnore
    public String getSenderIdentifier() {
        return getStandardBusinessDocumentHeader().getFirstSender()
                .map(Partner::getIdentifier)
                .map(PartnerIdentification::getStrippedValue)
                .orElse(null);
    }

    @JsonIgnore
    public Optional<String> getOnBehalfOfOrgNr() {
        return getStandardBusinessDocumentHeader().getFirstSender()
                .map(Partner::getIdentifier)
                .map(PartnerIdentification::getPaaVegneAvValue);
    }

    @JsonIgnore
    public Organisasjonsnummer getReceiver() {
        return getStandardBusinessDocumentHeader().getFirstReceiver()
                .map(Partner::getIdentifier)
                .map(PartnerIdentification::getAsOrganisasjonsnummer)
                .orElse(null);
    }

    @JsonIgnore
    public String getReceiverIdentifier() {
        return getStandardBusinessDocumentHeader().getFirstReceiver()
                .map(Partner::getIdentifier)
                .map(PartnerIdentification::getStrippedValue)
                .orElse(null);
    }

    @JsonIgnore
    public final String getJournalPostId() {
        return findScope(ScopeType.JOURNALPOST_ID)
                .map(Scope::getInstanceIdentifier)
                .orElse("");
    }

    @JsonIgnore
    public String getConversationId() {
        return getOptionalConversationId()
                .orElseThrow(MeldingsUtvekslingRuntimeException::new);
    }

    @JsonIgnore
    public Optional<String> getOptionalConversationId() {
        return findScope(ScopeType.CONVERSATION_ID)
                .map(Scope::getInstanceIdentifier);
    }

    @JsonIgnore
    public Set<Scope> getScopes() {
        return getStandardBusinessDocumentHeader()
                .getBusinessScope()
                .getScope();
    }

    public Scope getScope(ScopeType scopeType) {
        return findScope(scopeType)
                .orElseThrow(() -> new NextMoveRuntimeException(String.format("Missing scope %s", scopeType.name())));
    }

    public Optional<Scope> findScope(ScopeType scopeType) {
        return getScopes()
                .stream()
                .filter(scope -> scopeType.toString().equals(scope.getType()) || scopeType.name().equals(scope.getType()))
                .findAny();
    }

    @JsonIgnore
    public String getMessageType() {
        return getStandardBusinessDocumentHeader().getDocumentIdentification().getType();
    }

    @JsonIgnore
    public String getDocumentType() {
        return getStandardBusinessDocumentHeader().getDocumentIdentification().getStandard();
    }

    @JsonIgnore
    public String getProcess() {
        return getScope(ScopeType.CONVERSATION_ID)
                .getIdentifier();
    }

    @JsonIgnore
    public String getDocumentId() {
        return getStandardBusinessDocumentHeader().getDocumentIdentification().getInstanceIdentifier();
    }

    @JsonIgnore
    public String getMessageId() {
        return getDocumentId();
    }

    @JsonIgnore
    public Optional<String> getOptionalMessageId() {
        return Optional.ofNullable(getDocumentId());
    }

    public LogstashMarker createLogstashMarkers() {
        return getMessageInfo().createLogstashMarkers();
    }

    @JsonIgnore
    public Optional<OffsetDateTime> getExpectedResponseDateTime() {
        return getScope(ScopeType.CONVERSATION_ID)
                .getScopeInformation()
                .stream().findFirst()
                .map(CorrelationInformation::getExpectedResponseDateTime);
    }

    @JsonIgnore
    public Optional<String> getType() {
        return Optional.of(standardBusinessDocumentHeader)
                .flatMap(StandardBusinessDocumentHeader::getType);
    }
}
